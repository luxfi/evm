// Copyright (C) 2019-2025, Lux Industries, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

package warp

import (
	"context"
	"math"
	"testing"

	"github.com/luxfi/ids"
	"github.com/luxfi/node/consensus/validators"
	"github.com/luxfi/node/consensus/validators/validatorstest"
	"github.com/luxfi/node/utils/constants"
	"github.com/luxfi/crypto/bls"
	"github.com/luxfi/node/utils/set"
	luxWarp "github.com/luxfi/node/vms/platformvm/warp"
	"github.com/stretchr/testify/require"
)

type signatureTest struct {
	name         string
	stateF       func(*testing.T) validators.State
	quorumNum    uint64
	quorumDen    uint64
	msgF         func(*require.Assertions) *luxWarp.Message
	verifyErr    error
	canonicalErr error
}

// This test copies the test coverage from https://github.com/luxfi/node/blob/0117ab96/vms/platformvm/warp/signature_test.go#L137.
// These tests are only expected to fail if there is a breaking change in Luxd that unexpectedly changes behavior.
func TestSignatureVerification(t *testing.T) {
	tests := []signatureTest{
		{
			name: "can't get subnetID",
			stateF: func(t *testing.T) validators.State {
				return &validatorstest.State{
					T: t,
					GetSubnetIDF: func(ctx context.Context, chainID ids.ID) (ids.ID, error) {
						return sourceSubnetID, errTest
					},
				}
			},
			quorumNum: 1,
			quorumDen: 2,
			msgF: func(require *require.Assertions) *luxWarp.Message {
				unsignedMsg, err := luxWarp.NewUnsignedMessage(
					constants.UnitTestID,
					sourceChainID,
					addressedPayloadBytes,
				)
				require.NoError(err)

				msg, err := luxWarp.NewMessage(
					unsignedMsg,
					&luxWarp.BitSetSignature{},
				)
				require.NoError(err)
				return msg
			},
			canonicalErr: errTest,
		},
		{
			name: "can't get validator set",
			stateF: func(t *testing.T) validators.State {
				return &validatorstest.State{
					T: t,
					GetSubnetIDF: func(ctx context.Context, chainID ids.ID) (ids.ID, error) {
						return sourceSubnetID, nil
					},
					GetValidatorSetF: func(ctx context.Context, height uint64, subnetID ids.ID) (map[ids.NodeID]*validators.GetValidatorOutput, error) {
						return nil, errTest
					},
				}
			},
			quorumNum: 1,
			quorumDen: 2,
			msgF: func(require *require.Assertions) *luxWarp.Message {
				unsignedMsg, err := luxWarp.NewUnsignedMessage(
					constants.UnitTestID,
					sourceChainID,
					addressedPayloadBytes,
				)
				require.NoError(err)

				msg, err := luxWarp.NewMessage(
					unsignedMsg,
					&luxWarp.BitSetSignature{},
				)
				require.NoError(err)
				return msg
			},
			canonicalErr: errTest,
		},
		{
			name: "weight overflow",
			stateF: func(t *testing.T) validators.State {
				return &validatorstest.State{
					T: t,
					GetSubnetIDF: func(ctx context.Context, chainID ids.ID) (ids.ID, error) {
						return sourceSubnetID, nil
					},
					GetValidatorSetF: func(ctx context.Context, height uint64, subnetID ids.ID) (map[ids.NodeID]*validators.GetValidatorOutput, error) {
						return map[ids.NodeID]*validators.GetValidatorOutput{
							testVdrs[0].nodeID: {
								NodeID:    testVdrs[0].nodeID,
								PublicKey: testVdrs[0].vdr.PublicKey,
								Weight:    math.MaxUint64,
							},
							testVdrs[1].nodeID: {
								NodeID:    testVdrs[1].nodeID,
								PublicKey: testVdrs[1].vdr.PublicKey,
								Weight:    math.MaxUint64,
							},
						}, nil
					},
				}
			},
			quorumNum: 1,
			quorumDen: 2,
			msgF: func(require *require.Assertions) *luxWarp.Message {
				unsignedMsg, err := luxWarp.NewUnsignedMessage(
					constants.UnitTestID,
					sourceChainID,
					addressedPayloadBytes,
				)
				require.NoError(err)

				msg, err := luxWarp.NewMessage(
					unsignedMsg,
					&luxWarp.BitSetSignature{
						Signers: make([]byte, 8),
					},
				)
				require.NoError(err)
				return msg
			},
			canonicalErr: luxWarp.ErrWeightOverflow,
		},
		{
			name: "invalid bit set index",
			stateF: func(t *testing.T) validators.State {
				return &validatorstest.State{\n\t\t\t\t\tT: t,
				state.GetSubnetIDF = func(ctx context.Context, chainID ids.ID) (ids.ID, error) {
					return sourceSubnetID, nil
				}
				state.GetValidatorSetF = func(ctx context.Context, height uint64, subnetID ids.ID) (map[ids.NodeID]*validators.GetValidatorOutput, error) {
					return vdrs, nil
				}
				return state
			},
			quorumNum: 1,
			quorumDen: 2,
			msgF: func(require *require.Assertions) *luxWarp.Message {
				unsignedMsg, err := luxWarp.NewUnsignedMessage(
					constants.UnitTestID,
					sourceChainID,
					addressedPayloadBytes,
				)
				require.NoError(err)

				msg, err := luxWarp.NewMessage(
					unsignedMsg,
					&luxWarp.BitSetSignature{
						Signers:   make([]byte, 1),
						Signature: [bls.SignatureLen]byte{},
					},
				)
				require.NoError(err)
				return msg
			},
			verifyErr: luxWarp.ErrInvalidBitSet,
		},
		{
			name: "unknown index",
			stateF: func(t *testing.T) validators.State {
				return &validatorstest.State{\n\t\t\t\t\tT: t,
				state.GetSubnetIDF = func(ctx context.Context, chainID ids.ID) (ids.ID, error) {
					return sourceSubnetID, nil
				}
				state.GetValidatorSetF = func(ctx context.Context, height uint64, subnetID ids.ID) (map[ids.NodeID]*validators.GetValidatorOutput, error) {
					return vdrs, nil
				}
				return state
			},
			quorumNum: 1,
			quorumDen: 2,
			msgF: func(require *require.Assertions) *luxWarp.Message {
				unsignedMsg, err := luxWarp.NewUnsignedMessage(
					constants.UnitTestID,
					sourceChainID,
					addressedPayloadBytes,
				)
				require.NoError(err)

				signers := set.NewBits()
				signers.Add(3) // vdr oob

				msg, err := luxWarp.NewMessage(
					unsignedMsg,
					&luxWarp.BitSetSignature{
						Signers:   signers.Bytes(),
						Signature: [bls.SignatureLen]byte{},
					},
				)
				require.NoError(err)
				return msg
			},
			verifyErr: luxWarp.ErrUnknownValidator,
		},
		{
			name: "insufficient weight",
			stateF: func(t *testing.T) validators.State {
				return &validatorstest.State{\n\t\t\t\t\tT: t,
				state.GetSubnetIDF = func(ctx context.Context, chainID ids.ID) (ids.ID, error) {
					return sourceSubnetID, nil
				}
				state.GetValidatorSetF = func(ctx context.Context, height uint64, subnetID ids.ID) (map[ids.NodeID]*validators.GetValidatorOutput, error) {
					return vdrs, nil
				}
				return state
			},
			quorumNum: 1,
			quorumDen: 1,
			msgF: func(require *require.Assertions) *luxWarp.Message {
				unsignedMsg, err := luxWarp.NewUnsignedMessage(
					constants.UnitTestID,
					sourceChainID,
					addressedPayloadBytes,
				)
				require.NoError(err)

				// [signers] has weight from [vdr[0], vdr[1]],
				// which is 6, which is less than 9
				signers := set.NewBits()
				signers.Add(0)
				signers.Add(1)

				unsignedBytes := unsignedMsg.Bytes()
				vdr0Sig, err := testVdrs[0].sk.Sign(unsignedBytes)
				require.NoError(err)
				vdr1Sig, err := testVdrs[1].sk.Sign(unsignedBytes)
				require.NoError(err)
				aggSig, err := bls.AggregateSignatures([]*bls.Signature{vdr0Sig, vdr1Sig})
				require.NoError(err)
				aggSigBytes := [bls.SignatureLen]byte{}
				copy(aggSigBytes[:], bls.SignatureToBytes(aggSig))

				msg, err := luxWarp.NewMessage(
					unsignedMsg,
					&luxWarp.BitSetSignature{
						Signers:   signers.Bytes(),
						Signature: aggSigBytes,
					},
				)
				require.NoError(err)
				return msg
			},
			verifyErr: luxWarp.ErrInsufficientWeight,
		},
		{
			name: "can't parse sig",
			stateF: func(t *testing.T) validators.State {
				return &validatorstest.State{\n\t\t\t\t\tT: t,
				state.GetSubnetIDF = func(ctx context.Context, chainID ids.ID) (ids.ID, error) {
					return sourceSubnetID, nil
				}
				state.GetValidatorSetF = func(ctx context.Context, height uint64, subnetID ids.ID) (map[ids.NodeID]*validators.GetValidatorOutput, error) {
					return vdrs, nil
				}
				return state
			},
			quorumNum: 1,
			quorumDen: 2,
			msgF: func(require *require.Assertions) *luxWarp.Message {
				unsignedMsg, err := luxWarp.NewUnsignedMessage(
					constants.UnitTestID,
					sourceChainID,
					addressedPayloadBytes,
				)
				require.NoError(err)

				signers := set.NewBits()
				signers.Add(0)
				signers.Add(1)

				msg, err := luxWarp.NewMessage(
					unsignedMsg,
					&luxWarp.BitSetSignature{
						Signers:   signers.Bytes(),
						Signature: [bls.SignatureLen]byte{},
					},
				)
				require.NoError(err)
				return msg
			},
			verifyErr: luxWarp.ErrParseSignature,
		},
		{
			name: "no validators",
			stateF: func(t *testing.T) validators.State {
				return &validatorstest.State{\n\t\t\t\t\tT: t,
				state.GetSubnetIDF = func(ctx context.Context, chainID ids.ID) (ids.ID, error) {
					return sourceSubnetID, nil
				}
				state.GetValidatorSetF = func(ctx context.Context, height uint64, subnetID ids.ID) (map[ids.NodeID]*validators.GetValidatorOutput, error) {
					return nil, nil
				}
				return state
			},
			quorumNum: 1,
			quorumDen: 2,
			msgF: func(require *require.Assertions) *luxWarp.Message {
				unsignedMsg, err := luxWarp.NewUnsignedMessage(
					constants.UnitTestID,
					sourceChainID,
					addressedPayloadBytes,
				)
				require.NoError(err)

				unsignedBytes := unsignedMsg.Bytes()
				vdr0Sig, err := testVdrs[0].sk.Sign(unsignedBytes)
				require.NoError(err)
				aggSigBytes := [bls.SignatureLen]byte{}
				copy(aggSigBytes[:], bls.SignatureToBytes(vdr0Sig))

				msg, err := luxWarp.NewMessage(
					unsignedMsg,
					&luxWarp.BitSetSignature{
						Signers:   nil,
						Signature: aggSigBytes,
					},
				)
				require.NoError(err)
				return msg
			},
			verifyErr: bls.ErrNoPublicKeys,
		},
		{
			name: "invalid signature (substitute)",
			stateF: func(t *testing.T) validators.State {
				return &validatorstest.State{\n\t\t\t\t\tT: t,
				state.GetSubnetIDF = func(ctx context.Context, chainID ids.ID) (ids.ID, error) {
					return sourceSubnetID, nil
				}
				state.GetValidatorSetF = func(ctx context.Context, height uint64, subnetID ids.ID) (map[ids.NodeID]*validators.GetValidatorOutput, error) {
					return vdrs, nil
				}
				return state
			},
			quorumNum: 3,
			quorumDen: 5,
			msgF: func(require *require.Assertions) *luxWarp.Message {
				unsignedMsg, err := luxWarp.NewUnsignedMessage(
					constants.UnitTestID,
					sourceChainID,
					addressedPayloadBytes,
				)
				require.NoError(err)

				signers := set.NewBits()
				signers.Add(0)
				signers.Add(1)

				unsignedBytes := unsignedMsg.Bytes()
				vdr0Sig, err := testVdrs[0].sk.Sign(unsignedBytes)
				require.NoError(err)
				// Give sig from vdr[2] even though the bit vector says it
				// should be from vdr[1]
				vdr2Sig, err := testVdrs[2].sk.Sign(unsignedBytes)
				require.NoError(err)
				aggSig, err := bls.AggregateSignatures([]*bls.Signature{vdr0Sig, vdr2Sig})
				require.NoError(err)
				aggSigBytes := [bls.SignatureLen]byte{}
				copy(aggSigBytes[:], bls.SignatureToBytes(aggSig))

				msg, err := luxWarp.NewMessage(
					unsignedMsg,
					&luxWarp.BitSetSignature{
						Signers:   signers.Bytes(),
						Signature: aggSigBytes,
					},
				)
				require.NoError(err)
				return msg
			},
			verifyErr: luxWarp.ErrInvalidSignature,
		},
		{
			name: "invalid signature (missing one)",
			stateF: func(t *testing.T) validators.State {
				return &validatorstest.State{\n\t\t\t\t\tT: t,
				state.GetSubnetIDF = func(ctx context.Context, chainID ids.ID) (ids.ID, error) {
					return sourceSubnetID, nil
				}
				state.GetValidatorSetF = func(ctx context.Context, height uint64, subnetID ids.ID) (map[ids.NodeID]*validators.GetValidatorOutput, error) {
					return vdrs, nil
				}
				return state
			},
			quorumNum: 3,
			quorumDen: 5,
			msgF: func(require *require.Assertions) *luxWarp.Message {
				unsignedMsg, err := luxWarp.NewUnsignedMessage(
					constants.UnitTestID,
					sourceChainID,
					addressedPayloadBytes,
				)
				require.NoError(err)

				signers := set.NewBits()
				signers.Add(0)
				signers.Add(1)

				unsignedBytes := unsignedMsg.Bytes()
				vdr0Sig, err := testVdrs[0].sk.Sign(unsignedBytes)
				require.NoError(err)
				// Don't give the sig from vdr[1]
				aggSigBytes := [bls.SignatureLen]byte{}
				copy(aggSigBytes[:], bls.SignatureToBytes(vdr0Sig))

				msg, err := luxWarp.NewMessage(
					unsignedMsg,
					&luxWarp.BitSetSignature{
						Signers:   signers.Bytes(),
						Signature: aggSigBytes,
					},
				)
				require.NoError(err)
				return msg
			},
			verifyErr: luxWarp.ErrInvalidSignature,
		},
		{
			name: "invalid signature (extra one)",
			stateF: func(t *testing.T) validators.State {
				return &validatorstest.State{\n\t\t\t\t\tT: t,
				state.GetSubnetIDF = func(ctx context.Context, chainID ids.ID) (ids.ID, error) {
					return sourceSubnetID, nil
				}
				state.GetValidatorSetF = func(ctx context.Context, height uint64, subnetID ids.ID) (map[ids.NodeID]*validators.GetValidatorOutput, error) {
					return vdrs, nil
				}
				return state
			},
			quorumNum: 3,
			quorumDen: 5,
			msgF: func(require *require.Assertions) *luxWarp.Message {
				unsignedMsg, err := luxWarp.NewUnsignedMessage(
					constants.UnitTestID,
					sourceChainID,
					addressedPayloadBytes,
				)
				require.NoError(err)

				signers := set.NewBits()
				signers.Add(0)
				signers.Add(1)

				unsignedBytes := unsignedMsg.Bytes()
				vdr0Sig, err := testVdrs[0].sk.Sign(unsignedBytes)
				require.NoError(err)
				vdr1Sig, err := testVdrs[1].sk.Sign(unsignedBytes)
				require.NoError(err)
				// Give sig from vdr[2] even though the bit vector doesn't have
				// it
				vdr2Sig, err := testVdrs[2].sk.Sign(unsignedBytes)
				require.NoError(err)
				aggSig, err := bls.AggregateSignatures([]*bls.Signature{vdr0Sig, vdr1Sig, vdr2Sig})
				require.NoError(err)
				aggSigBytes := [bls.SignatureLen]byte{}
				copy(aggSigBytes[:], bls.SignatureToBytes(aggSig))

				msg, err := luxWarp.NewMessage(
					unsignedMsg,
					&luxWarp.BitSetSignature{
						Signers:   signers.Bytes(),
						Signature: aggSigBytes,
					},
				)
				require.NoError(err)
				return msg
			},
			verifyErr: luxWarp.ErrInvalidSignature,
		},
		{
			name: "valid signature",
			stateF: func(t *testing.T) validators.State {
				return &validatorstest.State{\n\t\t\t\t\tT: t,
				state.GetSubnetIDF = func(ctx context.Context, chainID ids.ID) (ids.ID, error) {
					return sourceSubnetID, nil
				}
				state.GetValidatorSetF = func(ctx context.Context, height uint64, subnetID ids.ID) (map[ids.NodeID]*validators.GetValidatorOutput, error) {
					return vdrs, nil
				}
				return state
			},
			quorumNum: 1,
			quorumDen: 2,
			msgF: func(require *require.Assertions) *luxWarp.Message {
				unsignedMsg, err := luxWarp.NewUnsignedMessage(
					constants.UnitTestID,
					sourceChainID,
					addressedPayloadBytes,
				)
				require.NoError(err)

				// [signers] has weight from [vdr[1], vdr[2]],
				// which is 6, which is greater than 4.5
				signers := set.NewBits()
				signers.Add(1)
				signers.Add(2)

				unsignedBytes := unsignedMsg.Bytes()
				vdr1Sig, err := testVdrs[1].sk.Sign(unsignedBytes)
				require.NoError(err)
				vdr2Sig, err := testVdrs[2].sk.Sign(unsignedBytes)
				require.NoError(err)
				aggSig, err := bls.AggregateSignatures([]*bls.Signature{vdr1Sig, vdr2Sig})
				require.NoError(err)
				aggSigBytes := [bls.SignatureLen]byte{}
				copy(aggSigBytes[:], bls.SignatureToBytes(aggSig))

				msg, err := luxWarp.NewMessage(
					unsignedMsg,
					&luxWarp.BitSetSignature{
						Signers:   signers.Bytes(),
						Signature: aggSigBytes,
					},
				)
				require.NoError(err)
				return msg
			},
			verifyErr: nil,
		},
		{
			name: "valid signature (boundary)",
			stateF: func(t *testing.T) validators.State {
				return &validatorstest.State{\n\t\t\t\t\tT: t,
				state.GetSubnetIDF = func(ctx context.Context, chainID ids.ID) (ids.ID, error) {
					return sourceSubnetID, nil
				}
				state.GetValidatorSetF = func(ctx context.Context, height uint64, subnetID ids.ID) (map[ids.NodeID]*validators.GetValidatorOutput, error) {
					return vdrs, nil
				}
				return state
			},
			quorumNum: 2,
			quorumDen: 3,
			msgF: func(require *require.Assertions) *luxWarp.Message {
				unsignedMsg, err := luxWarp.NewUnsignedMessage(
					constants.UnitTestID,
					sourceChainID,
					addressedPayloadBytes,
				)
				require.NoError(err)

				// [signers] has weight from [vdr[1], vdr[2]],
				// which is 6, which meets the minimum 6
				signers := set.NewBits()
				signers.Add(1)
				signers.Add(2)

				unsignedBytes := unsignedMsg.Bytes()
				vdr1Sig, err := testVdrs[1].sk.Sign(unsignedBytes)
				require.NoError(err)
				vdr2Sig, err := testVdrs[2].sk.Sign(unsignedBytes)
				require.NoError(err)
				aggSig, err := bls.AggregateSignatures([]*bls.Signature{vdr1Sig, vdr2Sig})
				require.NoError(err)
				aggSigBytes := [bls.SignatureLen]byte{}
				copy(aggSigBytes[:], bls.SignatureToBytes(aggSig))

				msg, err := luxWarp.NewMessage(
					unsignedMsg,
					&luxWarp.BitSetSignature{
						Signers:   signers.Bytes(),
						Signature: aggSigBytes,
					},
				)
				require.NoError(err)
				return msg
			},
			verifyErr: nil,
		},
		{
			name: "valid signature (missing key)",
			stateF: func(t *testing.T) validators.State {
				return &validatorstest.State{\n\t\t\t\t\tT: t,
				state.GetSubnetIDF = func(ctx context.Context, chainID ids.ID) (ids.ID, error) {
					return sourceSubnetID, nil
				}
				state.GetValidatorSetF = func(ctx context.Context, height uint64, subnetID ids.ID) (map[ids.NodeID]*validators.GetValidatorOutput, error) {
					return map[ids.NodeID]*validators.GetValidatorOutput{
						testVdrs[0].nodeID: {
							NodeID:    testVdrs[0].nodeID,
							PublicKey: nil,
							Weight:    testVdrs[0].vdr.Weight,
						},
						testVdrs[1].nodeID: {
							NodeID:    testVdrs[1].nodeID,
							PublicKey: testVdrs[1].vdr.PublicKey,
							Weight:    testVdrs[1].vdr.Weight,
						},
						testVdrs[2].nodeID: {
							NodeID:    testVdrs[2].nodeID,
							PublicKey: testVdrs[2].vdr.PublicKey,
							Weight:    testVdrs[2].vdr.Weight,
						},
					}, nil
				}
				return state
			},
			quorumNum: 1,
			quorumDen: 3,
			msgF: func(require *require.Assertions) *luxWarp.Message {
				unsignedMsg, err := luxWarp.NewUnsignedMessage(
					constants.UnitTestID,
					sourceChainID,
					addressedPayloadBytes,
				)
				require.NoError(err)

				// [signers] has weight from [vdr2, vdr3],
				// which is 6, which is greater than 3
				signers := set.NewBits()
				// Note: the bits are shifted because vdr[0]'s key was zeroed
				signers.Add(0) // vdr[1]
				signers.Add(1) // vdr[2]

				unsignedBytes := unsignedMsg.Bytes()
				vdr1Sig, err := testVdrs[1].sk.Sign(unsignedBytes)
				require.NoError(err)
				vdr2Sig, err := testVdrs[2].sk.Sign(unsignedBytes)
				require.NoError(err)
				aggSig, err := bls.AggregateSignatures([]*bls.Signature{vdr1Sig, vdr2Sig})
				require.NoError(err)
				aggSigBytes := [bls.SignatureLen]byte{}
				copy(aggSigBytes[:], bls.SignatureToBytes(aggSig))

				msg, err := luxWarp.NewMessage(
					unsignedMsg,
					&luxWarp.BitSetSignature{
						Signers:   signers.Bytes(),
						Signature: aggSigBytes,
					},
				)
				require.NoError(err)
				return msg
			},
			verifyErr: nil,
		},
		{
			name: "valid signature (duplicate key)",
			stateF: func(t *testing.T) validators.State {
				return &validatorstest.State{\n\t\t\t\t\tT: t,
				state.GetSubnetIDF = func(ctx context.Context, chainID ids.ID) (ids.ID, error) {
					return sourceSubnetID, nil
				}
				state.GetValidatorSetF = func(ctx context.Context, height uint64, subnetID ids.ID) (map[ids.NodeID]*validators.GetValidatorOutput, error) {
					return map[ids.NodeID]*validators.GetValidatorOutput{
						testVdrs[0].nodeID: {
							NodeID:    testVdrs[0].nodeID,
							PublicKey: nil,
							Weight:    testVdrs[0].vdr.Weight,
						},
						testVdrs[1].nodeID: {
							NodeID:    testVdrs[1].nodeID,
							PublicKey: testVdrs[2].vdr.PublicKey,
							Weight:    testVdrs[1].vdr.Weight,
						},
						testVdrs[2].nodeID: {
							NodeID:    testVdrs[2].nodeID,
							PublicKey: testVdrs[2].vdr.PublicKey,
							Weight:    testVdrs[2].vdr.Weight,
						},
					}, nil
				}
				return state
			},
			quorumNum: 2,
			quorumDen: 3,
			msgF: func(require *require.Assertions) *luxWarp.Message {
				unsignedMsg, err := luxWarp.NewUnsignedMessage(
					constants.UnitTestID,
					sourceChainID,
					addressedPayloadBytes,
				)
				require.NoError(err)

				// [signers] has weight from [vdr2, vdr3],
				// which is 6, which meets the minimum 6
				signers := set.NewBits()
				// Note: the bits are shifted because vdr[0]'s key was zeroed
				// Note: vdr[1] and vdr[2] were combined because of a shared pk
				signers.Add(0) // vdr[1] + vdr[2]

				unsignedBytes := unsignedMsg.Bytes()
				// Because vdr[1] and vdr[2] share a key, only one of them sign.
				vdr2Sig, err := testVdrs[2].sk.Sign(unsignedBytes)
				require.NoError(err)
				aggSigBytes := [bls.SignatureLen]byte{}
				copy(aggSigBytes[:], bls.SignatureToBytes(vdr2Sig))

				msg, err := luxWarp.NewMessage(
					unsignedMsg,
					&luxWarp.BitSetSignature{
						Signers:   signers.Bytes(),
						Signature: aggSigBytes,
					},
				)
				require.NoError(err)
				return msg
			},
			verifyErr: nil,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require := require.New(t)

			msg := tt.msgF(require)
			pChainState := tt.stateF(t)

			// The new Verify API directly takes the validators.State
			err := msg.Signature.Verify(
				context.Background(),
				&msg.UnsignedMessage,
				constants.UnitTestID,
				pChainState,
				pChainHeight,
				tt.quorumNum,
				tt.quorumDen,
			)
			// Check for both canonical and verify errors since the new API combines them
			if tt.canonicalErr != nil {
				require.ErrorIs(err, tt.canonicalErr)
			} else {
				require.ErrorIs(err, tt.verifyErr)
			}
		})
	}
}
